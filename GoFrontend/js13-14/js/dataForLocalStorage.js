var test14 = {
  header: 'Тест 14',
  data: [ { question: 'Что обозначает директива ‘use strict’?',
      answers: ['Код данного скрипта будет обработан по строгим правилам стандарта EcmaScript 6',
                'Код данного скрипта будет обработан по строгим правилам стандарта HTML5',
               'Код данного скрипта будет обработан по строгим правилам, однако допускается использование нестрогих правил написания кода',
               'Код данного скрипта будет обработан по строгим правилам стандарта EcmaScript 5'],
           id: '1',
           check: [0,0,0,1]
    },
  { question: 'К какому участку скрипта применяется строгие правила ‘use strict’?',
   answers: ['Во всем скрипте',
            'Внутри блока {}',
            'Строгие правила работают между директивами ‘use strict’ и ‘strict end’',
            'Либо во всем скрипте, либо в отдельной функции'],
   id: '2',
   check: [0,0,0,1]
  },
  { question: 'Какие основное ограничения к объявлению переменных в строгом режиме?',
  answers: ['Любая переменная должна объявляться с использованием ключевого слова var',
          'Название переменных должно быть camel-case с маленькой буквы',
          'Глобальные переменные должны объявляться с использованием ключевого слова var',
          'Переменные функций должны объявляться с использованием ключевого слова var'],
   id: '3',
   check: [1,0,0,0]
  },
  { question: 'Чему равен this в функциях вызванных на глобальном уровне (т.е. не внутри других функций)?',
   answers: ['null',
            'Сама функция',
            'undefined',
            'window'],
   id: '4',
   check: [0,0,1,0]
  },
  { question: 'Какой из пунктов не верен по отношению к строгому режиму javascript?',
   answers: ['Запрещено использование директивы evalThis answer is correct',
             'Запрещено дублирование полей объектов',
             'Запрещено дублирование параметров функции',
             'Запрещено удаление полей, имеющих свойство writable = false'],
   id: '5',
   check: [1,0,0,0]
  },
  { question: 'Для чего используется конструкция try-catch в javascript?',
   answers: ['Для генерирования ошибок',
             'В строгом режиме весь код необходимо оборачивать в try-catch',
             'Для обработки возможных ошибок',
             'Для замены условного оператора if'],
   id: '6',
   check: [0,0,1,0]
  },
  { question: 'Для чего необходим блок finally?',
   answers: ['Код внутри этого блока будет выполнен, если внутри блока try возникли ошибки',
             'Код внутри этого блока будет выполнен, если код внутри блока catch выполнен без ошибок',
             'Код внутри этого блока будет выполнен, если код внутри блока try выполнен без ошибок',
             'Код внутри этого блока будет в любом случае выполнен'],
   id: '7',
   check: [0,0,0,1]
  },
  { question: 'Как много блоков catch необходимо объявлять в конструкции try-catсh?',
   answers: ['Два',
             'Один',
             'По одному блоку на каждую возникшую ошибку внутри блока try',
             'Если есть блок finally - то один, если нету - то по одному блоку catch на каждую ошибку внутри блока try'],
   id: '8',
   check: [0,1,0,0]
  } ]
}; 

localStorage.setItem('test',JSON.stringify(test14));